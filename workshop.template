---
AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation template for creating workshop resources.

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select a keypair name for instance you would like to use on the Deep Learning AMI. If you do not have a keypair, please create one and come back to this step.

Mappings:
  RegionMap:
    us-east-1:
      "DeepLearningAMI": "ami-78994d02"
    us-west-2:
      "DeepLearningAMI": "ami-df77b6a7"
    us-east-2:
      "DeepLearningAMI": "ami-76537f13"
Resources:
    VPC:
        Type: AWS::EC2::VPC
        Properties:
          CidrBlock: 10.0.0.0/16
          EnableDnsHostnames: true
          EnableDnsSupport: true
          Tags:
            - Key: Name
              Value:
                Ref: AWS::StackName
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
          Tags:
          - Key: Name
            Value:
              Ref: AWS::StackName
    GatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
          InternetGatewayId:
            Ref: InternetGateway
          VpcId:
            Ref: VPC
    RouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          Tags:
            - Key: Name
              Value: {Ref: 'AWS::StackName'}
          VpcId:
            Ref: VPC
    PublicRoute:
        Type: AWS::EC2::Route
        Properties:
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId:
            Ref: InternetGateway
          RouteTableId:
            Ref: RouteTable
    Subnet1:
        Type: AWS::EC2::Subnet
        Properties:
          CidrBlock: 10.0.0.0/24
          MapPublicIpOnLaunch: true
          AvailabilityZone:
            Fn::Select:
              - 0
              - Fn::GetAZs: ""
          Tags:
            - Key: Name
              Value:
                Fn::Join:
                  - '-'
                  - [{Ref: 'AWS::StackName'}, "a"]
          VpcId: {Ref: VPC}
    Subnet2:
        Type: AWS::EC2::Subnet
        Properties:
          CidrBlock: 10.0.1.0/24
          MapPublicIpOnLaunch: true
          AvailabilityZone:
            Fn::Select:
              - 1
              - Fn::GetAZs: ""
          Tags:
            - Key: Name
              Value:
                Fn::Join:
                  - '-'
                  - [{Ref: 'AWS::StackName'}, "b"]
          VpcId: {Ref: VPC}
    Subnet3:
        Type: AWS::EC2::Subnet
        Properties:
          CidrBlock: 10.0.2.0/24
          MapPublicIpOnLaunch: true
          AvailabilityZone:
            Fn::Select:
              - 2
              - Fn::GetAZs: ""
          Tags:
            - Key: Name
              Value:
                Fn::Join:
                  - '-'
                  - [{Ref: 'AWS::StackName'}, "c"]
          VpcId: {Ref: VPC}
    SubnetAssoc1:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId:
            Ref: RouteTable
          SubnetId:
            Ref: Subnet1
    SubnetAssoc2:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId:
            Ref: RouteTable
          SubnetId:
            Ref: Subnet2
    SubnetAssoc3:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId:
            Ref: RouteTable
          SubnetId:
            Ref: Subnet3
    InstanceSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to client host
          VpcId:
            Ref: VPC
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '3306'
            ToPort: '3306'
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIpv6: ::/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: '0'
            ToPort: '65535'
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: '0'
            ToPort: '65535'
            CidrIpv6: ::/0
    NotebookSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow Glue Notebook Server to Communicate with Glue
          VpcId:
            Ref: VPC
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIpv6: ::/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: '0'
            ToPort: '65535'
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: '0'
            ToPort: '65535'
            CidrIpv6: ::/0
    SGSelfRefIngress:
        Type: 'AWS::EC2::SecurityGroupIngress'
        DependsOn: InstanceSecurityGroup
        Properties:
          GroupId: !Ref InstanceSecurityGroup
          IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          SourceSecurityGroupId: !Ref InstanceSecurityGroup
    SGSelfRefEgress:
        Type: 'AWS::EC2::SecurityGroupEgress'
        DependsOn: InstanceSecurityGroup
        Properties:
          GroupId: !Ref InstanceSecurityGroup
          IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          SourceSecurityGroupId: !Ref InstanceSecurityGroup
    SGSelfRefIngressNotebook:
        Type: 'AWS::EC2::SecurityGroupIngress'
        DependsOn: NotebookSecurityGroup
        Properties:
          GroupId: !Ref NotebookSecurityGroup
          IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          SourceSecurityGroupId: !Ref NotebookSecurityGroup
    SGSelfRefEgressNotebook:
        Type: 'AWS::EC2::SecurityGroupEgress'
        DependsOn: NotebookSecurityGroup
        Properties:
          GroupId: !Ref NotebookSecurityGroup
          IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          SourceSecurityGroupId: !Ref NotebookSecurityGroup
    VPCEndpoint:
        Type: AWS::EC2::VPCEndpoint
        Properties:
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Principal: '*'
                Action:
                  - '*'
                Resource:
                  - '*'
          RouteTableIds: [!Ref RouteTable ]
          ServiceName: !Join
            - ''
            - - com.amazonaws.
              - !Ref 'AWS::Region'
              - .s3
          VpcId: !Ref VPC
    GlueRole:
        Type: "AWS::IAM::Role"
        Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: ""
                Effect: "Allow"
                Principal:
                  Service:
                    - "glue.amazonaws.com"
                Action:
                  - "sts:AssumeRole"
          ManagedPolicyArns:
            - "arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess"
            - "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
            - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
            - "arn:aws:iam::aws:policy/CloudWatchFullAccess"
            - "arn:aws:iam::aws:policy/service-role/AWSGlueServiceNotebookRole"
            - "arn:aws:iam::aws:policy/AmazonRDSFullAccess"         
          RoleName: !Join
            - ''
            - - 'AWSGlueServiceRole'  
              - !Ref 'AWS::StackName'
    GlueNotebookRole:
        Type: "AWS::IAM::Role"
        Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Principal:
                  Service:
                    - "ec2.amazonaws.com"
                Action:
                  - "sts:AssumeRole"
          ManagedPolicyArns:
            - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
            - "arn:aws:iam::aws:policy/service-role/AWSGlueServiceNotebookRole"
          RoleName: !Join
            - ''
            - - 'AWSGlueServiceNotebookRole'  
              - !Ref 'AWS::StackName'
    GlucometerRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          - "arn:aws:iam::aws:policy/AmazonVPCFullAccess"
          - "arn:aws:iam::aws:policy/AmazonSNSFullAccess"
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        RoleName: !Join
          - ''
          - - 'GlucometerRole'  
            - !Ref 'AWS::StackName'
    GlueNotebookRoleInstanceProfile:
      Type: "AWS::IAM::InstanceProfile"
      Properties: 
       Roles:
        - !Ref GlueNotebookRole
       InstanceProfileName: !Join
          - ''
          - - 'AWSGlueServiceNotebookRole'  
            - !Ref 'AWS::StackName'
    GlueRoleInstanceProfile:
      Type: "AWS::IAM::InstanceProfile"
      Properties: 
       Roles:
        - !Ref GlueRole
       InstanceProfileName: !Join
          - ''
          - - 'AWSGlueServiceRole'  
            - !Ref 'AWS::StackName'
    S3Bucket:
        Type: 'AWS::S3::Bucket'
        Properties:
             AccessControl: BucketOwnerFullControl
        DeletionPolicy: Retain
    DatabaseSubnetGroup:
        Type: AWS::RDS::DBSubnetGroup
        Properties:
            DBSubnetGroupDescription: CloudFormation managed DB subnet group.
            SubnetIds: [!Ref Subnet1, !Ref Subnet2, !Ref Subnet3]
    DatabaseCluster:
        Type: AWS::RDS::DBCluster
        Properties:
            Engine: aurora
            MasterUsername: "master"
            MasterUserPassword: "4we4df234"
            DBSubnetGroupName:
                Ref: DatabaseSubnetGroup
            VpcSecurityGroupIds: [!Ref InstanceSecurityGroup]
    DatabasePrimaryInstance:
        Type: AWS::RDS::DBInstance
        Properties:
            Engine: aurora
            DBClusterIdentifier:
                Ref: DatabaseCluster
            DBInstanceClass: db.r3.large
            DBSubnetGroupName:
                Ref: DatabaseSubnetGroup
            PubliclyAccessible: true
    DeepLearningAMI:
        Type: "AWS::EC2::Instance"
        Properties:
            ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", "DeepLearningAMI"]
            InstanceType: "t2.small"
            KeyName: !Ref KeyName
            SecurityGroupIds: [!Ref InstanceSecurityGroup]
            IamInstanceProfile: !Ref GlueNotebookRoleInstanceProfile
            SubnetId:
                Ref: Subnet1
            Tags:
              - Key: Name
                Value:
                  Ref: AWS::StackName
            UserData:
              Fn::Base64: !Sub |
                #!/bin/bash
                sudo pip install pymysql
                sudo pip install -U scikit-learn
                sudo pip install seaborn

Outputs:
  RDSUser:
    Description: User name for audit database
    Value: "master"
  RDSPassword:
    Description: Password for audit database
    Value: "4we4df234"
  RDSHost:
    Description: Hostname for the RDS used in this lab
    Value: !GetAtt DatabasePrimaryInstance.Endpoint.Address
  S3Bucket:
    Description: S3 bucket for the workshop
    Value: !Ref S3Bucket
  VPC:
    Description: VPC for the workshop
    Value: !Ref VPC
  Subnets:
    Description: Subnets for the workshop
    Value: 
      Fn::Join:
        - ','
        - [!Ref Subnet3, !Ref Subnet2, !Ref Subnet1]
  SecurityGroup:
    Description: Security Group for the workshop
    Value: !Ref InstanceSecurityGroup
  GlueServiceRole:
    Description: Role for Glue Console Access
    Value: !Ref GlueRole
  RoleForNotebook:
    Description: Role for Glue Notebook
    Value: !Ref GlueNotebookRole
  NoteBookSecurityGroup:
    Description: Security group for the Glue Notebook Server
    Value: !Ref NotebookSecurityGroup
  DeepLearningAMI:
    Description: Information that relates to the Deep Learning AMI instance
    Value: !GetAtt DeepLearningAMI.PublicDnsName