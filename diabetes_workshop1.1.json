{"paragraphs":[{"text":"%md\nThis notebok demonstrates how **Amazon Glue** can be used to transform the data stored in the RDS database.We will read the data from the database and run a serries of transformations on it. Finally write that data back into a target table in RDS and also an S3 bucket. Execute each paragraph one by one to see the output of each section.","user":"admin","dateUpdated":"2017-11-05T23:47:06+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","lineNumbers":false,"tableHide":false,"editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>This notebok demonstrates how <strong>Amazon Glue</strong> can be used to transform the data stored in the RDS database.We will read the data from the database and run a serries of transformations on it. Finally write that data back into a target table in RDS and also an S3 bucket. Execute each paragraph one by one to see the output of each section.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1509924104152_-1258385064","id":"20171105-232144_1566981340","dateCreated":"2017-11-05T23:21:44+0000","dateStarted":"2017-11-05T23:47:06+0000","dateFinished":"2017-11-05T23:47:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:280"},{"title":"Import Necessary Libraries","text":"import sys\nfrom awsglue.transforms import *\nfrom awsglue.utils import getResolvedOptions\nfrom pyspark.context import SparkContext\nfrom awsglue.dynamicframe import DynamicFrame, DynamicFrameReader, DynamicFrameWriter, DynamicFrameCollection\nfrom awsglue.context import GlueContext\nfrom awsglue.job import Job\nfrom pyspark.sql import functions as F\nfrom pyspark.sql.types import IntegerType\n\n","user":"admin","dateUpdated":"2017-11-05T23:44:57+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509900608823_84771694","id":"20171105-165008_800437773","dateCreated":"2017-11-05T16:50:08+0000","dateStarted":"2017-11-05T23:29:47+0000","dateFinished":"2017-11-05T23:29:47+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:281"},{"text":"%md\nFirst, we create two datsources from our patients and labs tables in RDS ","user":"admin","dateUpdated":"2017-11-05T23:47:45+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>First, we create two datsources from our patients and labs tables in RDS</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1509924666925_1960608648","id":"20171105-233106_762630759","dateCreated":"2017-11-05T23:31:06+0000","dateStarted":"2017-11-05T23:47:45+0000","dateFinished":"2017-11-05T23:47:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:282"},{"text":"glueContext = GlueContext(SparkContext.getOrCreate())\n\n\ndatasource0 = glueContext.create_dynamic_frame.from_catalog(database = \"gluedatacatalog\", table_name = \"source_diabetes_patients\", transformation_ctx = \"datasource0\")\ndf0 = datasource0.toDF()\ndf0.show()\n\ndatasource1 = glueContext.create_dynamic_frame.from_catalog(database = \"gluedatacatalog\", table_name = \"source_diabetes_labs\"\n, transformation_ctx = \"datasource1\")\ndf1 = datasource1.toDF()\ndf1.show()","user":"admin","dateUpdated":"2017-11-05T23:33:03+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509900638695_885665662","id":"20171105-165038_175176679","dateCreated":"2017-11-05T16:50:38+0000","dateStarted":"2017-11-05T23:33:03+0000","dateFinished":"2017-11-05T23:33:04+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:283"},{"text":"%md\nNext, we create saperate data frames to store the aggregated lab values for each patient. ","user":"admin","dateUpdated":"2017-11-05T23:47:42+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Next, we create saperate data frames to store the aggregated lab values for each patient.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1509900653042_-1902979042","id":"20171105-165053_159307760","dateCreated":"2017-11-05T16:50:53+0000","dateStarted":"2017-11-05T23:47:42+0000","dateFinished":"2017-11-05T23:47:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:284"},{"text":"\n\nsqlContext.registerDataFrameAsTable(df1, \"labs\")\n\ndf_glucose = sqlContext.sql(\"SELECT PatientID ,min(LabValue) as minvalueglucose, LabType from labs group by PatientID,LabType having LabType='Glucose'\")\n\ndf_hba1c = sqlContext.sql(\"SELECT PatientID ,max(LabValue) as maxvaluehba1c, LabType from labs group by PatientID,LabType having LabType='HBA1C'\")\n\ndf_gfr = sqlContext.sql(\"SELECT PatientID ,min(LabValue) as minvaluegfr, LabType from labs group by PatientID,LabType having LabType='GFR'\")\n\ndf_glucose.show()\ndf_hba1c.show()\ndf_gfr.show()\n\n\n\n\n\n\n\n\n","user":"admin","dateUpdated":"2017-11-05T23:34:39+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509900788773_467641177","id":"20171105-165308_460306949","dateCreated":"2017-11-05T16:53:08+0000","dateStarted":"2017-11-05T23:34:39+0000","dateFinished":"2017-11-05T23:34:41+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:285"},{"text":"%md\nNow, lets join these tables with patient table to get a de-normalized record for a patient with his demographics and labs.","user":"admin","dateUpdated":"2017-11-05T23:47:38+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Now, lets join these tables with patient table to get a de-normalized record for a patient with his demographics and labs.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1509924907011_926740737","id":"20171105-233507_1455068798","dateCreated":"2017-11-05T23:35:07+0000","dateStarted":"2017-11-05T23:47:38+0000","dateFinished":"2017-11-05T23:47:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:286"},{"text":"\n\ndf3=df0.join(df_glucose, df0.PatientID == df_glucose.PatientID).drop(df_glucose.PatientID).drop(df_glucose.LabType)\ndf4=df3.join(df_hba1c, df3.PatientID == df_hba1c.PatientID).drop(df_hba1c.PatientID).drop(df_hba1c.LabType)\ndf5=df4.join(df_gfr, df4.PatientID == df_gfr.PatientID).drop(df_gfr.PatientID).drop(df_gfr.LabType)\n\ndf5.show()\n","user":"admin","dateUpdated":"2017-11-05T23:36:21+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509901082558_-1264299157","id":"20171105-165802_1319024486","dateCreated":"2017-11-05T16:58:02+0000","dateStarted":"2017-11-05T23:36:21+0000","dateFinished":"2017-11-05T23:36:39+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:287"},{"text":"%md\nWe now add new boolean columns HasHighHba1c,HasDiabeticRetinopathy and HasKidneyDisease. This store 1 (true) or 0 (false) based on conditions as shown in the code block below.","user":"admin","dateUpdated":"2017-11-05T23:47:35+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>We now add new boolean columns HasHighHba1c,HasDiabeticRetinopathy and HasKidneyDisease. This store 1 (true) or 0 (false) based on conditions as shown in the code block below.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1509925023180_1549834741","id":"20171105-233703_107268558","dateCreated":"2017-11-05T23:37:03+0000","dateStarted":"2017-11-05T23:47:35+0000","dateFinished":"2017-11-05T23:47:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:288"},{"text":"df_hashighhba1c=df5.withColumn('HasHighHba1c', F.when(df5.maxvaluehba1c > 7, 1).otherwise(0))\ndf_hasdiabeticretinopathy=df_hashighhba1c.withColumn('HasDiabeticRetinopathy', F.when(df_hashighhba1c.maxvaluehba1c > 9.5, 1).otherwise(0))\ndf_haskidneydisease=df_hasdiabeticretinopathy.withColumn('HasKidneyDisease', F.when(df_hasdiabeticretinopathy.minvaluegfr < 20, 1).otherwise(0))\n\ndf_haskidneydisease.filter(df_haskidneydisease.HasKidneyDisease == 1).count()","user":"admin","dateUpdated":"2017-11-06T00:15:09+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"50\n"}]},"apps":[],"jobName":"paragraph_1509902234242_-14960947","id":"20171105-171714_1564155397","dateCreated":"2017-11-05T17:17:14+0000","dateStarted":"2017-11-06T00:15:09+0000","dateFinished":"2017-11-06T00:15:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:289"},{"text":"%md\nNext, we will add two category attributes HBA1CCategory and glucoseCategory. The value of these attributes consist of either high, moderate or ok based on conditions as shown in the code block below.","user":"admin","dateUpdated":"2017-11-05T23:47:30+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Next, we will add two category attributes HBA1CCategory and glucoseCategory. The value of these attributes consist of either high, moderate or ok based on conditions as shown in the code block below.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1509925124149_-1035018929","id":"20171105-233844_1988815659","dateCreated":"2017-11-05T23:38:44+0000","dateStarted":"2017-11-05T23:47:30+0000","dateFinished":"2017-11-05T23:47:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:290"},{"text":"df_HBA1CCategory=df_haskidneydisease.withColumn('HBA1CCategory', F.when(df_haskidneydisease.maxvaluehba1c > 7.5, \"high\").\nwhen(df_haskidneydisease.maxvaluehba1c.between(6.5, 7.5),\"moderate\").otherwise(\"ok\"))\n\ndf_glucoseCategory=df_HBA1CCategory.withColumn('glucoseCategory', F.when(df_HBA1CCategory.minvalueglucose > 150, \"high\")\n.when(df_HBA1CCategory.minvalueglucose.between(100, 150),\"moderate\").otherwise(\"ok\"))\n\n\n\ndf_glucoseCategory.filter(df_glucoseCategory.HasKidneyDisease == 1).count()\n","user":"admin","dateUpdated":"2017-11-06T00:16:15+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"50\n"}]},"apps":[],"jobName":"paragraph_1509905357012_2103337326","id":"20171105-180917_1072175860","dateCreated":"2017-11-05T18:09:17+0000","dateStarted":"2017-11-06T00:16:15+0000","dateFinished":"2017-11-06T00:16:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:291"},{"text":"%md\nSo, now we have all the desired transformations built on the base dataset. Lets construct a final data frame that will be written into the target table in RDS and the S3 bucket.","user":"admin","dateUpdated":"2017-11-05T23:47:26+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>So, now we have all the desired transformations built on the base dataset. Lets construct a final data frame that will be written into the target table in RDS and the S3 bucket.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1509925264484_1759075201","id":"20171105-234104_1117622796","dateCreated":"2017-11-05T23:41:04+0000","dateStarted":"2017-11-05T23:47:26+0000","dateFinished":"2017-11-05T23:47:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:292"},{"text":"df_final=df_glucoseCategory.select('PatientID','PatientGender','PatientRace','PatientEthnicity','HasHighHba1c','HasDiabeticRetinopathy'\n,'HasKidneyDisease', 'glucoseCategory', 'HBA1CCategory')\n\ndf_final.filter(df_final.HasKidneyDisease == 1).count()\n\n","user":"admin","dateUpdated":"2017-11-06T00:21:41+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"50\n"}]},"apps":[],"jobName":"paragraph_1509905563003_1944698709","id":"20171105-181243_700759087","dateCreated":"2017-11-05T18:12:43+0000","dateStarted":"2017-11-06T00:21:41+0000","dateFinished":"2017-11-06T00:21:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:293"},{"text":"%md\nNow, we will call the datasink operation to write the data into S3 and RDS.","user":"admin","dateUpdated":"2017-11-05T23:47:21+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Now, we will call the datasink operation to write the data into S3 and RDS.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1509925386451_646898591","id":"20171105-234306_787934488","dateCreated":"2017-11-05T23:43:06+0000","dateStarted":"2017-11-05T23:47:21+0000","dateFinished":"2017-11-05T23:47:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:294"},{"text":"dynamicframeout0 = DynamicFrame.fromDF(df_final, glueContext, \"df_final\")\n\ndatasink1 = glueContext.write_dynamic_frame.from_catalog(frame = dynamicframeout0, database = \"gluedatacatalog\", table_name = \"source_diabetes_diabetesstudy\", transformation_ctx = \"datasink1\")\n\ndatasink = glueContext.write_dynamic_frame.from_options(frame = dynamicframeout0, connection_type = \"s3\", connection_options = \n{\"path\": \"s3://diabetesdata/diabetesworkshop/\"}, format = \"csv\", transformation_ctx = \"datasink\")\n\n","user":"admin","dateUpdated":"2017-11-06T00:23:58+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1509906643643_2106052994","id":"20171105-183043_146209655","dateCreated":"2017-11-05T18:30:43+0000","dateStarted":"2017-11-06T00:23:59+0000","dateFinished":"2017-11-06T00:24:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:295"},{"text":"%md\nCongratulations!You have now successfully transformed data using **Amazon Glue**.","user":"admin","dateUpdated":"2017-11-05T23:48:04+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Congratulations!You have now successfully transformed data using <strong>Amazon Glue</strong>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1509907528370_-487712317","id":"20171105-184528_1590224156","dateCreated":"2017-11-05T18:45:28+0000","dateStarted":"2017-11-05T23:48:04+0000","dateFinished":"2017-11-05T23:48:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:296"},{"text":"%md\n","user":"admin","dateUpdated":"2017-11-05T23:47:13+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509925589675_-1822144014","id":"20171105-234629_1293581668","dateCreated":"2017-11-05T23:46:29+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:297"}],"name":"diabetes_workshop1.1","id":"2CXHEYSZ7","angularObjects":{"2CRE5X63N:shared_process":[],"2CQZ9JC8F:shared_process":[],"2CNAPD13W:shared_process":[],"2CRC324G8:existing_process":[],"2CQ1X8PFU:shared_process":[],"2CNFC7TNE:shared_process":[],"2CMQ2EHTE:shared_process":[],"2CQUCJVJA:shared_process":[],"2CQY3SUDK:shared_process":[],"2CNA37GFQ:shared_process":[],"2CPH9H73W:shared_process":[],"2CR2XFEE3:shared_process":[],"2CQ9YVF7W:shared_process":[],"2CP1P36EU:shared_process":[],"2CMR9MKCE:shared_process":[],"2CR2YZBFW:shared_process":[],"2CPJK4U6W:shared_process":[],"2CR2Z9UR2:shared_process":[],"2CPQWHWM3:shared_process":[]},"config":{"looknfeel":"simple","personalizedMode":"false"},"info":{}}